"use strict";(self.webpackChunkgb_studio_docs=self.webpackChunkgb_studio_docs||[]).push([[8767],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>m});var l=a(7294);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);t&&(l=l.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,l)}return a}function r(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function n(e,t){if(null==e)return{};var a,l,i=function(e,t){if(null==e)return{};var a,l,i={},o=Object.keys(e);for(l=0;l<o.length;l++)a=o[l],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(l=0;l<o.length;l++)a=o[l],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var s=l.createContext({}),c=function(e){var t=l.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):r(r({},t),e)),a},p=function(e){var t=c(e.components);return l.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return l.createElement(l.Fragment,{},t)}},d=l.forwardRef((function(e,t){var a=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,p=n(e,["components","mdxType","originalType","parentName"]),d=c(a),m=i,h=d["".concat(s,".").concat(m)]||d[m]||u[m]||o;return a?l.createElement(h,r(r({ref:t},p),{},{components:a})):l.createElement(h,r({ref:t},p))}));function m(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=a.length,r=new Array(o);r[0]=d;var n={};for(var s in t)hasOwnProperty.call(t,s)&&(n[s]=t[s]);n.originalType=e,n.mdxType="string"==typeof e?e:i,r[1]=n;for(var c=2;c<o;c++)r[c]=a[c];return l.createElement.apply(null,r)}return l.createElement.apply(null,a)}d.displayName="MDXCreateElement"},237:(e,t,a)=>{a.d(t,{Z:()=>G});var l=a(7294),i=a(6010);const o="wrapper_Ipv2",r="header_uY2Y",n="collapsableHeader_Wady",s="form_gV8o",c="field_znmN",p="group_Pakl",u="fieldHalf_mvGz",d="fieldInput_DJtc",m="flexGrow_dGNp",h="select_piNM",y="selectActor_gmv1",f="input_Tp_3",k="textarea_tAAu",v="code_VhHR",b="checkbox_kfbl",g="toggleButtons_NXwh",T="toggleButtonsRow__YdE",A="toggleButtonsOption_LK3C",w="toggleButtonsOptionSelected_L_DP",S="conditional_NY1W",N="conditionalLabel_bY4O",E="eventsWrapper_kJsX",x="button_yKMz",V="buttonSmall_hjQK",I="eventButton_WDUY",_="unionSelect_Jb_2",P="tabs_nij8",C="tab_tomX",$="tabSelected_B_9X",D="break_GXKR",O="unknown_nmto",L="paletteSwatch_SD8s";function Z(){return l.createElement("div",{className:_},l.createElement("svg",{width:"24",height:"24",viewBox:"0 0 24 24"},l.createElement("ellipse",{ry:"10",id:"svg_1",cy:"12",cx:"12",strokeWidth:"3",stroke:"#ccc",fill:"transparent"}),l.createElement("circle",{cx:"12",cy:"12",r:"2"})))}function j(e){let{children:t}=e;return l.createElement("div",{className:f,children:t})}function F(e){let{children:t}=e;return l.createElement("div",{className:k,children:t})}function M(e){let{children:t}=e;return l.createElement("div",{className:(0,i.Z)(k,v),children:t})}function B(e){let{children:t}=e;return l.createElement("div",{className:h},t,l.createElement("div",{className:m}),l.createElement("svg",{height:"20",width:"20",viewBox:"0 0 20 20",ariaHidden:"true",focusable:"false"},l.createElement("path",{d:"M4.516 7.548c0.436-0.446 1.043-0.481 1.576 0l3.908 3.747 3.908-3.747c0.533-0.481 1.141-0.446 1.574 0 0.436 0.445 0.408 1.197 0 1.615-0.406 0.418-4.695 4.502-4.695 4.502-0.217 0.223-0.502 0.335-0.787 0.335s-0.57-0.112-0.789-0.335c0 0-4.287-4.084-4.695-4.502s-0.436-1.17 0-1.615z"})))}function R(){return l.createElement("div",{className:L},l.createElement("div",{style:{backgroundColor:"rgb(232, 248, 224)"}}),l.createElement("div",{style:{backgroundColor:"rgb(176, 240, 136)"}}),l.createElement("div",{style:{backgroundColor:"rgb(80, 152, 120)"}}),l.createElement("div",{style:{backgroundColor:"rgb(32, 40, 80)"}}))}function z(e){let{options:t,moreOptions:a,value:o}=e;return l.createElement("div",{className:g},l.createElement("div",{className:T},t.map((e=>l.createElement("div",{className:(0,i.Z)(A,{[w]:Array.isArray(o)?o.includes(e.value):o===e.value})},e.label)))),a&&l.createElement("div",{className:T},a.map((e=>l.createElement("div",{className:(0,i.Z)(A,{[w]:Array.isArray(o)?o.includes(e.value):o===e.value})},e.label)))))}const U=e=>{let{angle:t}=e;return l.createElement("svg",{width:"24",height:"24",viewBox:"0 0 24 24",style:{transform:"rotate("+t+"deg)"}},l.createElement("path",{d:"M24 22h-24l12-20z"}))};function X(e){let{field:t}=e;return"actor"===t.type?l.createElement(B,null,l.createElement("img",{className:y,src:"/img/script-glossary/actor.png"}),"player"===t.defaultValue?"Player":"Actor 1"):"emote"===t.type?l.createElement(B,null,l.createElement("img",{className:y,src:"/img/script-glossary/emote.png"}),"Love"):"avatar"===t.type?l.createElement(B,null,l.createElement("img",{className:y,src:"/img/script-glossary/actor.png"}),"Avatar 1"):"scene"===t.type?l.createElement(B,null,"Scene 1"):"animationstate"===t.type?l.createElement(B,null,"Default"):"overlayColor"===t.type?l.createElement(B,null,"Black"):"cameraSpeed"===t.type?l.createElement(B,null,"Speed 1"):"moveSpeed"===t.type?l.createElement(B,null,"Speed 2"):"animSpeed"===t.type?l.createElement(B,null,"Speed 4"):"fadeSpeed"===t.type?l.createElement(B,null,"Speed 1"):"customEvent"===t.type?l.createElement(B,null,"My Custom Script"):"engineField"===t.type?l.createElement(B,null,"Jump Velocity"):"music"===t.type||"music"===t.type?l.createElement(B,null,"My Track 1"):"soundEffect"===t.type?l.createElement(B,null,"Beep"):"number"===t.type||"text"===t.type||"matharea"===t.type?l.createElement(j,null,t.placeholder||t.defaultValue):"textarea"===t.type?l.createElement(F,null,t.placeholder||t.defaultValue):"code"===t.type?l.createElement(M,null,t.placeholder||t.defaultValue):"references"===t.type?l.createElement("div",{className:(0,i.Z)(x,V)},"Add Reference"):"moveType"===t.type?l.createElement("div",{className:x},l.createElement("svg",{width:"24",height:"24",viewBox:"0 0 24 24"},l.createElement("path",{d:"M6 11v-4l-6 5 6 5v-4h12v4l6-5-6-5v4z"}))):"priority"===t.type?l.createElement("div",{className:x},l.createElement("svg",{width:"24",height:"24",viewBox:"0 0 24 24"},l.createElement("path",{d:"M 8.17 6.493 C 8.09 5.692 8.72 5 9.521 5 C 10.322 5 10.952 5.692 10.872 6.493 L 10.071 14.503 C 10.042 14.785 9.805 15 9.521 15 C 9.237 15 9 14.785 8.971 14.502 L 8.17 6.493 Z M 9.521 19.25 C 8.831 19.25 8.271 18.69 8.271 18 C 8.271 17.31 8.831 16.75 9.521 16.75 C 10.211 16.75 10.771 17.31 10.771 18 C 10.771 18.69 10.211 19.25 9.521 19.25 Z"}),l.createElement("path",{d:"M 13.128 6.493 C 13.048 5.692 13.678 5 14.479 5 C 15.28 5 15.91 5.692 15.83 6.493 L 15.029 14.503 C 15 14.785 14.763 15 14.479 15 C 14.195 15 13.958 14.785 13.929 14.502 L 13.128 6.493 Z M 14.479 19.25 C 13.789 19.25 13.229 18.69 13.229 18 C 13.229 17.31 13.789 16.75 14.479 16.75 C 15.169 16.75 15.729 17.31 15.729 18 C 15.729 18.69 15.169 19.25 14.479 19.25 Z"}))):"operator"===t.type||"mathOperator"===t.type?l.createElement(B,null,t.defaultValue):"direction"===t.type?l.createElement(z,{options:[{label:l.createElement(U,{angle:-90}),value:"left"},{label:l.createElement(U,{angle:0}),value:"up"},{label:l.createElement(U,{angle:180}),value:"down"},{label:l.createElement(U,{angle:90}),value:"right"}]}):"input"===t.type?l.createElement(z,{options:[{label:l.createElement(U,{angle:-90}),value:"left"},{label:l.createElement(U,{angle:0}),value:"up"},{label:l.createElement(U,{angle:180}),value:"down"},{label:l.createElement(U,{angle:90}),value:"right"}],moreOptions:[{label:"A",value:"a"},{label:"B",value:"b"},{label:"Start",value:"start"},{label:"Select",value:"select"}]}):"select"===t.type?l.createElement(B,null,(t.options.find((e=>e[0]===t.defaultValue))||t.options[0])[1]):"sprite"===t.type?l.createElement(B,null,l.createElement("img",{className:y,src:"/img/script-glossary/actor.png"}),l.createElement("div",{className:m},"cat")):"variable"===t.type?l.createElement(B,null,"$Variable0"):"palette"===t.type?l.createElement(B,null,l.createElement(R,null),void 0!==t.paletteIndex?t.paletteIndex+": ":""," ","Palette ",t.paletteIndex):"collisionMask"===t.type?l.createElement(z,{value:t.defaultValue,options:[].concat(t.includePlayer?{label:"Player",value:"player",selected:"player"===t.defaultValue}:[],[{label:"1",value:"1",selected:"1"===t.defaultValue},{label:"2",value:"2",selected:"2"===t.defaultValue},{label:"3",value:"3",selected:"3"===t.defaultValue}])}):"selectbutton"===t.type?l.createElement(Z,null):"togglebuttons"===t.type?l.createElement(z,{options:t.options.map((e=>({label:e[1],value:e[0]}))),value:t.defaultValue}):"tabs"===t.type?l.createElement("div",{className:P},Object.keys(t.values).map((e=>l.createElement("div",{key:e,className:(0,i.Z)(C,{[$]:e===t.defaultValue})},t.values[e])))):l.createElement("div",{className:O},"Unknown Type ",t.type)}function Y(e){let{field:t,args:a}=e;if(t.type||t.label){if(t.conditions){if(!t.conditions.reduce(((e,t)=>{const l=null==a?void 0:a[t.key];return e&&(!t.eq||l===t.eq)&&(!t.ne||l!==t.ne)&&(!t.gt||Number(l)>Number(t.gt))&&(!t.gte||Number(l)>=Number(t.gte))&&(!t.lt||Number(l)>Number(t.lt))&&(!t.lte||Number(l)>=Number(t.lte))&&(!t.in||t.in.indexOf(l)>=0)}),!0))return null}if("group"===t.type)return l.createElement("div",{className:p},t.fields.map(((e,t)=>l.createElement(Y,{key:t,field:e,args:a}))));if("checkbox"===t.type)return l.createElement("div",{className:(0,i.Z)(c,{[u]:"50%"===t.width}),style:{flexBasis:t.flexBasis,flexGrow:t.flexGrow,flexShrink:t.flexShrink}},l.createElement("div",{className:b},l.createElement("input",{type:"checkbox",checked:t.defaultValue})," ",t.label));if("collapsable"===t.type)return l.createElement("div",{className:(0,i.Z)(n)},t.label);if("events"===t.type)return l.createElement("div",{title:t.label,className:S},l.createElement("div",{className:N},t.label),l.createElement("div",{className:E},l.createElement("div",{class:"sc-JsfGe eFPlT","data-handler-id":"T48"},l.createElement("div",{class:"sc-eiQXzm cklbLv"},l.createElement("div",{className:(0,i.Z)(x,I)},l.createElement("svg",{width:"24",height:"24",viewBox:"0 0 24 24"},l.createElement("path",{d:"M24 9h-9v-9h-6v9h-9v6h9v9h6v-9h9z"})),"Add Event")))));if("union"===t.type){const e={...t,type:t.defaultType,union:!0,defaultValue:t.defaultValue[t.defaultType]};return l.createElement(Y,{field:e,args:a})}return"break"===t.type?l.createElement("div",{className:D}):l.createElement("div",{className:(0,i.Z)(c,{[u]:"50%"===t.width}),style:{flexBasis:t.flexBasis,flexGrow:t.flexGrow,flexShrink:t.flexShrink}},!t.hideLabel&&t.label,l.createElement("div",{className:d},t.type&&l.createElement(X,{field:t}),t.union&&l.createElement(Z,null)))}}const H=(e,t)=>{t||(t={});for(const a of e)a.key&&void 0!==a.defaultValue&&(t[a.key]=a.defaultValue),"group"===a.type&&H(a.fields,t);return t};function G(e){let{title:t,fields:a}=e;const n=H(a);return l.createElement("div",{className:(0,i.Z)(o)},l.createElement("div",{className:(0,i.Z)(r)},t),l.createElement("div",{className:(0,i.Z)(s)},a.map(((e,t)=>l.createElement(Y,{key:t,field:e,args:n})))))}},4362:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>c,contentTitle:()=>n,default:()=>d,frontMatter:()=>r,metadata:()=>s,toc:()=>p});var l=a(7462),i=(a(7294),a(3905)),o=a(237);const r={sidebar_position:2},n="Actor",s={unversionedId:"scripting/script-glossary/actor",id:"scripting/script-glossary/actor",title:"Actor",description:"Activate Actor",source:"@site/i18n/fr/docusaurus-plugin-content-docs/current/scripting/script-glossary/actor.md",sourceDirName:"scripting/script-glossary",slug:"/scripting/script-glossary/actor",permalink:"/gb-studio-docs/fr/docs/scripting/script-glossary/actor",draft:!1,editUrl:"https://github.com/chrismaltby/gb-studio-docs/tree/main/docs/scripting/script-glossary/actor.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Event Glossary",permalink:"/gb-studio-docs/fr/docs/category/event-glossary"},next:{title:"Camera",permalink:"/gb-studio-docs/fr/docs/scripting/script-glossary/camera"}},c={},p=[{value:"Activate Actor",id:"activate-actor",level:2},{value:"Actor Move Cancel",id:"actor-move-cancel",level:2},{value:"Actor Move Relative",id:"actor-move-relative",level:2},{value:"Actor Move To",id:"actor-move-to",level:2},{value:"Deactivate Actor",id:"deactivate-actor",level:2},{value:"Hide Actor",id:"hide-actor",level:2},{value:"Hide All Sprites",id:"hide-all-sprites",level:2},{value:"If Actor At Position",id:"if-actor-at-position",level:2},{value:"If Actor Distance From Actor",id:"if-actor-distance-from-actor",level:2},{value:"If Actor Facing Direction",id:"if-actor-facing-direction",level:2},{value:"If Actor Relative To Actor",id:"if-actor-relative-to-actor",level:2},{value:"Launch Projectile",id:"launch-projectile",level:2},{value:"Player Bounce",id:"player-bounce",level:2},{value:"Push Actor Away From Player",id:"push-actor-away-from-player",level:2},{value:"Set Actor Animation Frame",id:"set-actor-animation-frame",level:2},{value:"Set Actor Animation Speed",id:"set-actor-animation-speed",level:2},{value:"Set Actor Animation State",id:"set-actor-animation-state",level:2},{value:"Set Actor Collisions Disable",id:"set-actor-collisions-disable",level:2},{value:"Set Actor Collisions Enable",id:"set-actor-collisions-enable",level:2},{value:"Set Actor Direction",id:"set-actor-direction",level:2},{value:"Set Actor Movement Speed",id:"set-actor-movement-speed",level:2},{value:"Set Actor Position",id:"set-actor-position",level:2},{value:"Set Actor Relative Position",id:"set-actor-relative-position",level:2},{value:"Set Actor Sprite Sheet",id:"set-actor-sprite-sheet",level:2},{value:"Set Player Sprite Sheet",id:"set-player-sprite-sheet",level:2},{value:"Show Actor",id:"show-actor",level:2},{value:"Show All Sprites",id:"show-all-sprites",level:2},{value:"Show Emote Bubble",id:"show-emote-bubble",level:2},{value:"Start Actor&#39;s &quot;On Update&quot; Script",id:"start-actors-on-update-script",level:2},{value:"Stop Actor&#39;s &quot;On Update&quot; Script",id:"stop-actors-on-update-script",level:2},{value:"Store Actor Direction In Variable",id:"store-actor-direction-in-variable",level:2},{value:"Store Actor Position In Variables",id:"store-actor-position-in-variables",level:2}],u={toc:p};function d(e){let{components:t,...a}=e;return(0,i.kt)("wrapper",(0,l.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"actor"},"Actor"),(0,i.kt)("h2",{id:"activate-actor"},"Activate Actor"),(0,i.kt)("p",null,"Activate an actor, causing it to become visible (if not also hidden) and for its OnUpdate script to start."),(0,i.kt)(o.Z,{title:"Activate Actor",fields:[{key:"actorId",label:"Actor",description:"The actor you want to activate.",type:"actor",defaultValue:"$self$"}],mdxType:"ScriptEventPreview"}),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Actor"),": The actor you want to activate.  ")),(0,i.kt)("h2",{id:"actor-move-cancel"},"Actor Move Cancel"),(0,i.kt)("p",null,'Cancel any currently running "Actor Move" events affecting this actor. Causes the actor to stop in its current location.'),(0,i.kt)(o.Z,{title:"Actor Move Cancel",fields:[{key:"actorId",label:"Actor",description:"The actor you want to cancel movement for.",type:"actor",defaultValue:"$self$"}],mdxType:"ScriptEventPreview"}),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Actor"),": The actor you want to cancel movement for.  ")),(0,i.kt)("h2",{id:"actor-move-relative"},"Actor Move Relative"),(0,i.kt)("p",null,"Move an actor relative to its current position."),(0,i.kt)(o.Z,{title:"Actor Move Relative",fields:[{key:"actorId",label:"Actor",description:"The actor you want to move.",type:"actor",defaultValue:"$self$"},{type:"group",fields:[{key:"x",label:"X",description:"The horizontal offset relative to the current position.",type:"number",min:-31,max:31,width:"50%",defaultValue:0,unitsField:"units",unitsDefault:"tiles",unitsAllowed:["tiles","pixels"]},{key:"y",label:"Y",description:"The vertical offset relative to the current position.",type:"number",min:-31,max:31,width:"50%",defaultValue:0,unitsField:"units",unitsDefault:"tiles",unitsAllowed:["tiles","pixels"]}]},{key:"moveType",label:"Movement Type",description:"Choose if should move in horizontal/vertical axis first or if it should move diagonally to destination.",hideLabel:!0,type:"moveType",defaultValue:"horizontal",flexBasis:30,flexGrow:0},{key:"useCollisions",label:"Use Collisions",description:"Set if collisions with both scene and actors should be taken into account while moving.",width:"50%",alignCheckbox:!0,type:"checkbox",defaultValue:!1}],mdxType:"ScriptEventPreview"}),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Actor"),": The actor you want to move.  "),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"X"),": The horizontal offset relative to the current position.  "),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Y"),": The vertical offset relative to the current position.  "),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Movement Type"),": Choose if should move in horizontal/vertical axis first or if it should move diagonally to destination.  "),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Use Collisions"),": Set if collisions with both scene and actors should be taken into account while moving.  ")),(0,i.kt)("h2",{id:"actor-move-to"},"Actor Move To"),(0,i.kt)("p",null,"Move an actor to a new position."),(0,i.kt)(o.Z,{title:"Actor Move To",fields:[{key:"actorId",label:"Actor",description:"The actor you want to move.",type:"actor",defaultValue:"$self$"},{type:"group",fields:[{key:"x",label:"X",description:"The horizontal position.",type:"union",types:["number","variable","property"],defaultType:"number",min:0,max:255,width:"50%",unitsField:"units",unitsDefault:"tiles",unitsAllowed:["tiles","pixels"],defaultValue:{number:0,variable:"LAST_VARIABLE",property:"$self$:xpos"}},{key:"y",label:"Y",description:"The vertical position.",type:"union",types:["number","variable","property"],defaultType:"number",min:0,max:255,width:"50%",unitsField:"units",unitsDefault:"tiles",unitsAllowed:["tiles","pixels"],defaultValue:{number:0,variable:"LAST_VARIABLE",property:"$self$:ypos"}}]},{key:"moveType",label:"Movement Type",description:"Choose if should move in horizontal/vertical axis first or if it should move diagonally to destination.",hideLabel:!0,type:"moveType",defaultValue:"horizontal",flexBasis:30,flexGrow:0},{key:"useCollisions",label:"Use Collisions",description:"Set if collisions with both scene and actors should be taken into account while moving.",width:"50%",alignCheckbox:!0,type:"checkbox",defaultValue:!1}],mdxType:"ScriptEventPreview"}),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Actor"),": The actor you want to move.  "),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"X"),": The horizontal position.  "),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Y"),": The vertical position.  "),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Movement Type"),": Choose if should move in horizontal/vertical axis first or if it should move diagonally to destination.  "),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Use Collisions"),": Set if collisions with both scene and actors should be taken into account while moving.  ")),(0,i.kt)("h2",{id:"deactivate-actor"},"Deactivate Actor"),(0,i.kt)("p",null,"Deactivate an actor, causing it to act as if it had gone offscreen. It will become invisible and its OnUpdate script will be stopped."),(0,i.kt)(o.Z,{title:"Deactivate Actor",fields:[{key:"actorId",label:"Actor",description:"The actor you want to deactivate.",type:"actor",defaultValue:"$self$"}],mdxType:"ScriptEventPreview"}),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Actor"),": The actor you want to deactivate.  ")),(0,i.kt)("h2",{id:"hide-actor"},"Hide Actor"),(0,i.kt)("p",null,"Hide an actor, causing it to become invisible. Its OnUpdate script will continue to run while hidden."),(0,i.kt)(o.Z,{title:"Hide Actor",fields:[{key:"actorId",label:"Actor",description:"The actor you want to hide.",type:"actor",defaultValue:"$self$"}],mdxType:"ScriptEventPreview"}),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Actor"),": The actor you want to hide.  ")),(0,i.kt)("h2",{id:"hide-all-sprites"},"Hide All Sprites"),(0,i.kt)("p",null,"Disable rendering of sprite layer causing all sprites to become hidden until sprite rendering is reenabled."),(0,i.kt)(o.Z,{title:"Hide All Sprites",fields:[{label:"Hide all sprites from screen."}],mdxType:"ScriptEventPreview"}),(0,i.kt)("h2",{id:"if-actor-at-position"},"If Actor At Position"),(0,i.kt)("p",null,"Conditionally run part of the script if an actor is at a specified position."),(0,i.kt)(o.Z,{title:"If Actor At Position",fields:[{key:"actorId",label:"Actor",description:"The actor you want to check.",type:"actor",defaultValue:"$self$"},{type:"group",fields:[{key:"x",label:"X",description:"The horizontal position.",type:"number",min:0,max:255,width:"50%",defaultValue:0,unitsField:"units",unitsDefault:"tiles",unitsAllowed:["tiles","pixels"]},{key:"y",label:"Y",description:"The vertical position.",type:"number",min:0,max:255,width:"50%",defaultValue:0,unitsField:"units",unitsDefault:"tiles",unitsAllowed:["tiles","pixels"]}]},{key:"true",label:"True",description:"The script to run if the condition is true.",type:"events"},{key:"__collapseElse",label:"Else",type:"collapsable",defaultValue:!0,conditions:[{key:"__disableElse",ne:!0}]},{key:"false",label:"False",description:"The script to run if the condition is false.",conditions:[{key:"__collapseElse",ne:!0},{key:"__disableElse",ne:!0}],type:"events"}],mdxType:"ScriptEventPreview"}),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Actor"),": The actor you want to check.  "),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"X"),": The horizontal position.  "),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Y"),": The vertical position.  "),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"True"),": The script to run if the condition is true.  "),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"False"),": The script to run if the condition is false.  ")),(0,i.kt)("h2",{id:"if-actor-distance-from-actor"},"If Actor Distance From Actor"),(0,i.kt)("p",null,"Conditionally run part of the script if an actor is within a certain distance of another actor."),(0,i.kt)(o.Z,{title:"If Actor Distance From Actor",fields:[{key:"actorId",label:"Actor",description:"The actor you want to check.",type:"actor",defaultValue:"player",width:"50%"},{type:"group",fields:[{key:"operator",label:"Comparison",description:"The comparison operator to use e.g. 'Less Than' or 'Greater Than'.",type:"operator",width:"50%",defaultValue:"<="},{key:"distance",label:"Distance",description:"The distance value.",type:"union",types:["number","variable"],defaultType:"number",min:0,max:181,width:"50%",unitsDefault:"tiles",defaultValue:{number:0,variable:"LAST_VARIABLE"}}]},{key:"otherActorId",label:"From",description:"The actor to compare distance with.",type:"actor",defaultValue:"$self$",width:"50%"},{key:"true",label:"True",description:"The script to run if the condition is true.",type:"events"},{key:"__collapseElse",label:"Else",type:"collapsable",defaultValue:!0,conditions:[{key:"__disableElse",ne:!0}]},{key:"false",label:"False",description:"The script to run if the condition is false.",conditions:[{key:"__collapseElse",ne:!0},{key:"__disableElse",ne:!0}],type:"events"}],mdxType:"ScriptEventPreview"}),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Actor"),": The actor you want to check.  "),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Comparison"),": The comparison operator to use e.g. 'Less Than' or 'Greater Than'.  "),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Distance"),": The distance value.  "),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"From"),": The actor to compare distance with.  "),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"True"),": The script to run if the condition is true.  "),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"False"),": The script to run if the condition is false.  ")),(0,i.kt)("h2",{id:"if-actor-facing-direction"},"If Actor Facing Direction"),(0,i.kt)("p",null,"Conditionally run part of the script if an actor is facing in a specified direction."),(0,i.kt)(o.Z,{title:"If Actor Facing Direction",fields:[{key:"actorId",label:"Actor",description:"The actor you want to check.",type:"actor",defaultValue:"$self$"},{key:"direction",label:"Direction",description:"The actor direction.",type:"direction",defaultValue:"up"},{key:"true",label:"True",description:"The script to run if the condition is true.",type:"events"},{key:"__collapseElse",label:"Else",type:"collapsable",defaultValue:!0,conditions:[{key:"__disableElse",ne:!0}]},{key:"false",label:"False",description:"The script to run if the condition is false.",conditions:[{key:"__collapseElse",ne:!0},{key:"__disableElse",ne:!0}],type:"events"}],mdxType:"ScriptEventPreview"}),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Actor"),": The actor you want to check.  "),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Direction"),": The actor direction.  "),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"True"),": The script to run if the condition is true.  "),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"False"),": The script to run if the condition is false.  ")),(0,i.kt)("h2",{id:"if-actor-relative-to-actor"},"If Actor Relative To Actor"),(0,i.kt)("p",null,"Conditionally run part of the script based on the position of one actor relative to another."),(0,i.kt)(o.Z,{title:"If Actor Relative To Actor",fields:[{key:"actorId",label:"Actor",description:"The actor you want to check.",type:"actor",defaultValue:"player"},{key:"operation",label:"Comparison",description:"The relative position comparison to use e.g. 'Is Above' or 'Is Below'.",type:"select",options:[["up","Is Above"],["down","Is Below"],["left","Is Left of"],["right","Is Right of"]],defaultValue:"up",width:"50%"},{key:"otherActorId",label:"Other Actor",description:"The actor to compare position with.",type:"actor",defaultValue:"$self$"},{key:"true",label:"True",description:"The script to run if the condition is true.",type:"events"},{key:"__collapseElse",label:"Else",type:"collapsable",defaultValue:!0,conditions:[{key:"__disableElse",ne:!0}]},{key:"false",label:"False",description:"The script to run if the condition is false.",conditions:[{key:"__collapseElse",ne:!0},{key:"__disableElse",ne:!0}],type:"events"}],mdxType:"ScriptEventPreview"}),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Actor"),": The actor you want to check.  "),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Comparison"),": The relative position comparison to use e.g. 'Is Above' or 'Is Below'.  "),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Other Actor"),": The actor to compare position with.  "),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"True"),": The script to run if the condition is true.  "),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"False"),": The script to run if the condition is false.  ")),(0,i.kt)("h2",{id:"launch-projectile"},"Launch Projectile"),(0,i.kt)("p",null,"Launch a projectile from an actor in a specified direction. When a project collides with other actors it will trigger their OnHit scripts."),(0,i.kt)(o.Z,{title:"Launch Projectile",fields:[{type:"group",fields:[{key:"spriteSheetId",type:"sprite",label:"Sprite Sheet",description:"The sprite to use for rendering the projectile.",defaultValue:"LAST_SPRITE"},{key:"spriteStateId",type:"animationstate",label:"Animation State",description:"The sprite animation state to use.",defaultValue:""}]},{key:"actorId",type:"actor",label:"Source",description:"The actor to launch the projectile from.",defaultValue:"$self$"},{type:"group",fields:[{key:"x",label:"Offset X",description:"The horizontal offset from the source actors position to start launching the projectile.",type:"number",min:-256,max:256,width:"50%",defaultValue:0},{key:"y",label:"Offset Y",description:"The vertical offset from the source actors position to start launching the projectile.",type:"number",min:-256,max:256,width:"50%",defaultValue:0}]},{type:"group",width:"50%",fields:[{key:"otherActorId",label:"Direction",description:"The direction to launch the projectile. Can either be a fixed direction or based on an actor's current direction.",type:"actor",defaultValue:"$self$",conditions:[{key:"directionType",eq:"actor"}]},{key:"direction",label:"Direction",description:"The direction to launch the projectile. Can either be a fixed direction or based on an actor's current direction.",type:"direction",defaultValue:"right",conditions:[{key:"directionType",eq:"direction"}]},{key:"angle",label:"Angle",description:"The angle to launch the projectile.",type:"number",defaultValue:0,conditions:[{key:"directionType",eq:"angle"}]},{key:"angleVariable",label:"Angle",description:"The angle to launch the projectile.",type:"variable",defaultValue:"LAST_VARIABLE",conditions:[{key:"directionType",eq:"anglevar"}]},{key:"directionType",type:"selectbutton",options:[["direction","Fixed Direction"],["actor","Actor Direction"],["angle","Angle"],["anglevar","Angle Variable"]],inline:!0,defaultValue:"direction"}]},{key:"initialOffset",label:"Direction Offset",description:"The distance the projectile should move from launch position in its launch direction before becoming visible.",type:"number",min:0,max:256,width:"50%",defaultValue:0},{type:"group",fields:[{key:"speed",label:"Speed",description:"The movement speed.",type:"moveSpeed",allowNone:!0,defaultValue:2,width:"50%"},{key:"animSpeed",label:"Animation Speed",description:"The animation speed.",type:"animSpeed",defaultValue:15,width:"50%"}]},{key:"lifeTime",label:"Life Time",description:"The amount of time in seconds that the projectile will live for.",type:"number",min:0,max:4,step:.1,width:"50%",defaultValue:1},{type:"group",fields:[{key:"loopAnim",label:"Loop Animation",description:"Set if animation should loop.",type:"checkbox",alignCheckbox:!0,defaultValue:!0},{key:"destroyOnHit",label:"Destroy On Hit",description:"Set if the projectile should be destroyed after its first collision.",type:"checkbox",alignCheckbox:!0,defaultValue:!0}]},{type:"group",fields:[{key:"collisionGroup",label:"Collision Group",description:"The collision group that should be used when registering collisions with actors.",type:"collisionMask",width:"50%",includePlayer:!1,defaultValue:"3"},{key:"collisionMask",label:"Collide With",description:"The groups of actors that will be checked for collisions. e.g. If it should pass through any actors but the player set this field to just 'Player'.",type:"collisionMask",width:"50%",includePlayer:!0,defaultValue:["1"]}]}],mdxType:"ScriptEventPreview"}),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Sprite Sheet"),": The sprite to use for rendering the projectile.  "),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Animation State"),": The sprite animation state to use.  "),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Source"),": The actor to launch the projectile from.  "),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Offset X"),": The horizontal offset from the source actors position to start launching the projectile.  "),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Offset Y"),": The vertical offset from the source actors position to start launching the projectile.  "),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Direction"),": The direction to launch the projectile. Can either be a fixed direction or based on an actor's current direction.  "),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Angle"),": The angle to launch the projectile.  "),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Direction Offset"),": The distance the projectile should move from launch position in its launch direction before becoming visible.  "),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Speed"),": The movement speed.  "),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Animation Speed"),": The animation speed.  "),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Life Time"),": The amount of time in seconds that the projectile will live for.  "),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Loop Animation"),": Set if animation should loop.  "),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Destroy On Hit"),": Set if the projectile should be destroyed after its first collision.  "),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Collision Group"),": The collision group that should be used when registering collisions with actors.  "),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Collide With"),": The groups of actors that will be checked for collisions. e.g. If it should pass through any actors but the player set this field to just 'Player'.  ")),(0,i.kt)("h2",{id:"player-bounce"},"Player Bounce"),(0,i.kt)("p",null,"In platform scenes causes the player to bounce upwards by setting the player's velocity Y value."),(0,i.kt)(o.Z,{title:"Player Bounce",fields:[{key:"height",type:"select",label:"Height",description:"How high the player should bounce.",options:[["low","Low"],["medium","Medium"],["high","High"]],defaultValue:"medium"},{label:"Affects Platform scenes only"}],mdxType:"ScriptEventPreview"}),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Height"),": How high the player should bounce.  ")),(0,i.kt)("h2",{id:"push-actor-away-from-player"},"Push Actor Away From Player"),(0,i.kt)("p",null,"Causes the specified actor to be moved in the direction that the player is currently facing. Useful for creating block puzzles."),(0,i.kt)(o.Z,{title:"Push Actor Away From Player",fields:[{key:"continue",label:"Slide Until Collision",description:"Set to make the actor continue to move until a collision with another actor or the scene occurs.",type:"checkbox",defaultValue:!1}],mdxType:"ScriptEventPreview"}),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Slide Until Collision"),": Set to make the actor continue to move until a collision with another actor or the scene occurs.  ")),(0,i.kt)("h2",{id:"set-actor-animation-frame"},"Set Actor Animation Frame"),(0,i.kt)("p",null,"Set an actor's animation to a specified frame value."),(0,i.kt)(o.Z,{title:"Set Actor Animation Frame",fields:[{key:"actorId",label:"Actor",description:"The actor you want to update.",type:"actor",defaultValue:"$self$"},{key:"frame",label:"Animation Frame",description:"The animation frame value.",type:"union",types:["number","variable","property"],defaultType:"number",min:0,max:25,defaultValue:{number:0,variable:"LAST_VARIABLE",property:"$self$:frame"}}],mdxType:"ScriptEventPreview"}),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Actor"),": The actor you want to update.  "),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Animation Frame"),": The animation frame value.  ")),(0,i.kt)("h2",{id:"set-actor-animation-speed"},"Set Actor Animation Speed"),(0,i.kt)("p",null,"Set the animation speed of an actor to a new value."),(0,i.kt)(o.Z,{title:"Set Actor Animation Speed",fields:[{key:"actorId",label:"Actor",description:"The actor you want to update.",type:"actor",defaultValue:"$self$"},{key:"speed",label:"Animation Speed",description:"The animation speed.",type:"animSpeed",defaultValue:15}],mdxType:"ScriptEventPreview"}),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Actor"),": The actor you want to update.  "),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Animation Speed"),": The animation speed.  ")),(0,i.kt)("h2",{id:"set-actor-animation-state"},"Set Actor Animation State"),(0,i.kt)("p",null,"Change the sprite animation state for a specified actor."),(0,i.kt)(o.Z,{title:"Set Actor Animation State",fields:[{key:"actorId",label:"Actor",description:"The actor you want to update.",type:"actor",defaultValue:"$self$"},{key:"spriteStateId",label:"Animation State",description:"The sprite animation state to use.",type:"animationstate",defaultValue:""}],mdxType:"ScriptEventPreview"}),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Actor"),": The actor you want to update.  "),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Animation State"),": The sprite animation state to use.  ")),(0,i.kt)("h2",{id:"set-actor-collisions-disable"},"Set Actor Collisions Disable"),(0,i.kt)("p",null,"Disable all collision checks for an actor allowing the player and all other actor's to pass through it while moving."),(0,i.kt)(o.Z,{title:"Set Actor Collisions Disable",fields:[{key:"actorId",label:"Actor",description:"The actor you want to update.",type:"actor",defaultValue:"$self$"}],mdxType:"ScriptEventPreview"}),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Actor"),": The actor you want to update.  ")),(0,i.kt)("h2",{id:"set-actor-collisions-enable"},"Set Actor Collisions Enable"),(0,i.kt)("p",null,"Re-enable collisions for an actor causing it to become solid again if collisions had previously been disabled."),(0,i.kt)(o.Z,{title:"Set Actor Collisions Enable",fields:[{key:"actorId",label:"Actor",description:"The actor you want to update.",type:"actor",defaultValue:"$self$"}],mdxType:"ScriptEventPreview"}),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Actor"),": The actor you want to update.  ")),(0,i.kt)("h2",{id:"set-actor-direction"},"Set Actor Direction"),(0,i.kt)("p",null,"Change the direction that an actor is currently facing."),(0,i.kt)(o.Z,{title:"Set Actor Direction",fields:[{key:"actorId",label:"Actor",description:"The actor you want to update.",type:"actor",defaultValue:"$self$"},{key:"direction",label:"Direction",description:"The actor direction.",type:"union",types:["direction","variable","property"],defaultType:"direction",defaultValue:{direction:"up",variable:"LAST_VARIABLE",property:"$self$:direction"}}],mdxType:"ScriptEventPreview"}),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Actor"),": The actor you want to update.  "),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Direction"),": The actor direction.  ")),(0,i.kt)("h2",{id:"set-actor-movement-speed"},"Set Actor Movement Speed"),(0,i.kt)("p",null,"Set the movement speed of an actor to a new value."),(0,i.kt)(o.Z,{title:"Set Actor Movement Speed",fields:[{key:"actorId",label:"Actor",description:"The actor you want to update.",type:"actor",defaultValue:"$self$"},{key:"speed",label:"Speed",description:"The movement speed.",type:"moveSpeed",defaultValue:1}],mdxType:"ScriptEventPreview"}),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Actor"),": The actor you want to update.  "),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Speed"),": The movement speed.  ")),(0,i.kt)("h2",{id:"set-actor-position"},"Set Actor Position"),(0,i.kt)("p",null,"Set the position of an actor, causing it to instantly move to the new location."),(0,i.kt)(o.Z,{title:"Set Actor Position",fields:[{key:"actorId",label:"Actor",description:"The actor you want to update.",type:"actor",defaultValue:"$self$"},{type:"group",fields:[{key:"x",label:"X",description:"The horizontal position.",type:"union",types:["number","variable","property"],defaultType:"number",min:0,max:255,width:"50%",unitsField:"units",unitsDefault:"tiles",unitsAllowed:["tiles","pixels"],defaultValue:{number:0,variable:"LAST_VARIABLE",property:"$self$:xpos"}},{key:"y",label:"Y",description:"The vertical position.",type:"union",types:["number","variable","property"],defaultType:"number",min:0,max:255,width:"50%",unitsField:"units",unitsDefault:"tiles",unitsAllowed:["tiles","pixels"],defaultValue:{number:0,variable:"LAST_VARIABLE",property:"$self$:ypos"}}]}],mdxType:"ScriptEventPreview"}),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Actor"),": The actor you want to update.  "),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"X"),": The horizontal position.  "),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Y"),": The vertical position.  ")),(0,i.kt)("h2",{id:"set-actor-relative-position"},"Set Actor Relative Position"),(0,i.kt)("p",null,"Set the position of an actor relative to it's previous position, causing it to instantly move to the new location."),(0,i.kt)(o.Z,{title:"Set Actor Relative Position",fields:[{key:"actorId",label:"Actor",description:"The actor you want to update.",type:"actor",defaultValue:"$self$"},{type:"group",fields:[{key:"x",label:"X",description:"The horizontal offset relative to the current position.",type:"number",min:-31,max:31,width:"50%",defaultValue:0,unitsField:"units",unitsDefault:"tiles",unitsAllowed:["tiles","pixels"]},{key:"y",label:"Y",description:"The vertical offset relative to the current position.",type:"number",min:-31,max:31,width:"50%",defaultValue:0,unitsField:"units",unitsDefault:"tiles",unitsAllowed:["tiles","pixels"]}]}],mdxType:"ScriptEventPreview"}),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Actor"),": The actor you want to update.  "),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"X"),": The horizontal offset relative to the current position.  "),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Y"),": The vertical offset relative to the current position.  ")),(0,i.kt)("h2",{id:"set-actor-sprite-sheet"},"Set Actor Sprite Sheet"),(0,i.kt)("p",null,"Set the sprite that should be used to render an actor."),(0,i.kt)(o.Z,{title:"Set Actor Sprite Sheet",fields:[{key:"actorId",label:"Actor",description:"The actor you want to update.",type:"actor",defaultValue:"$self$"},{key:"spriteSheetId",label:"Sprite Sheet",description:"The sprite to use for rendering the actor.",type:"sprite",defaultValue:"LAST_SPRITE"}],mdxType:"ScriptEventPreview"}),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Actor"),": The actor you want to update.  "),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Sprite Sheet"),": The sprite to use for rendering the actor.  ")),(0,i.kt)("h2",{id:"set-player-sprite-sheet"},"Set Player Sprite Sheet"),(0,i.kt)("p",null,"Set the sprite that should be used to render the player."),(0,i.kt)(o.Z,{title:"Set Player Sprite Sheet",fields:[{key:"spriteSheetId",label:"Sprite Sheet",description:"The sprite to use for rendering the player.",type:"sprite",defaultValue:"LAST_SPRITE"},{key:"persist",label:"Replace Default For Scene Type",description:"Causes this sprite to override the default for all scenes of the current type. i.e. If you are currently in a platformer scene, all other platformer scenes using the default sprite will now load using this replacement sprite automatically instead.",type:"checkbox",defaultValue:!1}],mdxType:"ScriptEventPreview"}),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Sprite Sheet"),": The sprite to use for rendering the player.  "),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Replace Default For Scene Type"),": Causes this sprite to override the default for all scenes of the current type. i.e. If you are currently in a platformer scene, all other platformer scenes using the default sprite will now load using this replacement sprite automatically instead.  ")),(0,i.kt)("h2",{id:"show-actor"},"Show Actor"),(0,i.kt)("p",null,"Unhide a previously hidden actor."),(0,i.kt)(o.Z,{title:"Show Actor",fields:[{key:"actorId",label:"Actor",description:"The actor you want to show.",type:"actor",defaultValue:"$self$"}],mdxType:"ScriptEventPreview"}),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Actor"),": The actor you want to show.  ")),(0,i.kt)("h2",{id:"show-all-sprites"},"Show All Sprites"),(0,i.kt)("p",null,"Re-enable rendering of the sprite layer if previously disabled."),(0,i.kt)(o.Z,{title:"Show All Sprites",fields:[{label:"Unhide all active sprites."}],mdxType:"ScriptEventPreview"}),(0,i.kt)("h2",{id:"show-emote-bubble"},"Show Emote Bubble"),(0,i.kt)("p",null,"Show an emote image above a specified actor. The image will be positioned centrally above the actor's collision bounding box."),(0,i.kt)(o.Z,{title:"Show Emote Bubble",fields:[{key:"actorId",label:"Actor",description:"The actor to display an emote image above.",type:"actor",defaultValue:"$self$"},{key:"emoteId",label:"Emote",description:"The emote image to display.",type:"emote",defaultValue:"LAST_EMOTE"}],mdxType:"ScriptEventPreview"}),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Actor"),": The actor to display an emote image above.  "),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Emote"),": The emote image to display.  ")),(0,i.kt)("h2",{id:"start-actors-on-update-script"},'Start Actor\'s "On Update" Script'),(0,i.kt)("p",null,"Start an actors OnUpdate script if it is not currently running. If the actor is currently offscreen its script may become deactivated causing the script to stop running again, to prevent this set the 'Keep Running While Offscreen' setting for the actor's OnUpdate script."),(0,i.kt)(o.Z,{title:'Start Actor\'s "On Update" Script',fields:[{key:"actorId",label:"Actor",description:"The actor you want to update.",type:"actor",defaultValue:"$self$"}],mdxType:"ScriptEventPreview"}),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Actor"),": The actor you want to update.  ")),(0,i.kt)("h2",{id:"stop-actors-on-update-script"},'Stop Actor\'s "On Update" Script'),(0,i.kt)("p",null,"Stop an actors OnUpdate script if it was currently running."),(0,i.kt)(o.Z,{title:'Stop Actor\'s "On Update" Script',fields:[{key:"actorId",label:"Actor",description:"The actor you want to update.",type:"actor",defaultValue:"$self$"}],mdxType:"ScriptEventPreview"}),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Actor"),": The actor you want to update.  ")),(0,i.kt)("h2",{id:"store-actor-direction-in-variable"},"Store Actor Direction In Variable"),(0,i.kt)("p",null,"Store the current direction of an actor within a variable."),(0,i.kt)(o.Z,{title:"Store Actor Direction In Variable",fields:[{key:"actorId",label:"Actor",description:"The actor you want to check.",type:"actor",defaultValue:"$self$"},{key:"direction",label:"Variable",description:"The variable to use for the direction.",type:"variable",defaultValue:"LAST_VARIABLE"}],mdxType:"ScriptEventPreview"}),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Actor"),": The actor you want to check.  "),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Variable"),": The variable to use for the direction.  ")),(0,i.kt)("h2",{id:"store-actor-position-in-variables"},"Store Actor Position In Variables"),(0,i.kt)("p",null,"Store the current position of an actor within two variables, one to store the horizontal position and another to store the vertical position."),(0,i.kt)(o.Z,{title:"Store Actor Position In Variables",fields:[{key:"actorId",label:"Actor",description:"The actor you want to check.",type:"actor",defaultValue:"$self$"},{type:"group",fields:[{key:"vectorX",type:"variable",label:"X",description:"The variable to use for the horizontal position.",defaultValue:"LAST_VARIABLE",width:"50%",unitsField:"units",unitsDefault:"tiles",unitsAllowed:["tiles","pixels"]},{key:"vectorY",type:"variable",label:"Y",description:"The variable to use for the vertical position.",defaultValue:"LAST_VARIABLE",width:"50%",unitsField:"units",unitsDefault:"tiles",unitsAllowed:["tiles","pixels"]}]}],mdxType:"ScriptEventPreview"}),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Actor"),": The actor you want to check.  "),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"X"),": The variable to use for the horizontal position.  "),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Y"),": The variable to use for the vertical position.")))}d.isMDXComponent=!0}}]);